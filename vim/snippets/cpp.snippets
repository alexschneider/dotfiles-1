include c.snip

snippet incc
	#include <c${1:stdio}>${2}

## STL Collections
# std::array
snippet array
	std::array<${1:T}, ${2:N}> ${3};${4}
# std::vector
snippet vector
	std::vector<${1:T}> ${2};${3}
# std::deque
snippet deque
	std::deque<${1:T}> ${2};${3}
# std::forward_list
snippet flist
	std::forward_list<${1:T}> ${2};${3}
# std::list
snippet list
	std::list<${1:T}> ${2};${3}
# std::set
snippet set
	std::set<${1:T}> ${2};${3}
# std::map
snippet map
	std::map<${1:Key}, ${2:T}> ${3};${4}
# std::multiset
snippet mset
	std::multiset<${1:T}> ${2};${3}
# std::multimap
snippet mmap
	std::multimap<${1:Key}, ${2:T}> ${3};${4}
# std::unordered_set
snippet uset
	std::unordered_set<${1:T}> ${2};${3}
# std::unordered_map
snippet umap
	std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
# std::unordered_multiset
snippet umset
	std::unordered_multiset<${1:T}> ${2};${3}
# std::unordered_multimap
snippet ummap
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
# std::stack
snippet stack
	std::stack<${1:T}> ${2};${3}
# std::queue
snippet queue
	std::queue<${1:T}> ${2};${3}
# std::priority_queue
snippet pqueue
	std::priority_queue<${1:T}> ${2};${3}

snippet     template
abbr        template <T>
    template <typename ${1:T}>${2}

snippet     try
abbr        try catch
    try {
        ${1:TARGET}
    }
    catch (${2:exception}) {
        ${3}
    }

##
## Access Modifiers
# private
snippet pri
	private
# protected
snippet pro
	protected
# public
snippet pub
	public
# friend
snippet fr
	friend
# mutable
snippet mu
	mutable
## 
## Class
# class
snippet class
	class ${1:`Filename('$1', 'name')`} {
		${2}
	};

# member function implementation
snippet mfunc
	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${5:/* code */}
	}
# namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	}
##
## Input/Output
# std::cout
snippet cout
	std::cout << ${1} << std::endl;${2}
# std::cin
snippet cin
	std::cin >> ${1};${2}
##
## Iteration
# for i 
delete forint
snippet forint
	for (int ${1:i} = 0; $1 < ${2:count}; ${3:++}$1) {
		${4}
	}

snippet forsize
	for (size_t ${1:i} = 0; $1 < ${2:count}; ${3:++}$1) {
		${4}
	}

snippet forv
	for (${1} ${2:i} = ${3}; $2 ${4:<} ${5:count}; ${6:++}$2) {
		${7}
	}

# iterator
snippet foriter
	for (${1:type}::${2:const_iterator} ${3:i} = ${4:container}.begin(); $3 != $4.end(); ++$3) {
		${5}
	}

snippet forstl
	for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
		${6}
	}

## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3:/* code */}}${4}
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3:/* code */}
	}${4}

snippet     static_cast
abbr        static_cast<>()
    static_cast<${1}>(${2})${0}

snippet     reinterpret_cast
abbr        reinterpret_cast<>()
    reinterpret_cast<${1}>(${2})${0}

snippet     const_cast
abbr        const_cast<>()
    const_cast<${1}>(${2})${0}

snippet     dynamic_cast
abbr        dynamic_cast<>()
    dynamic_cast<${1}>(${2})${0}

delete      helloworld
snippet     helloworld
abbr        #include<iostream> int main...
    #include <iostream>

    int main(int argc, const char *argv[]) {
        std::cout << "hello, world!" << std::endl;
        ${1:return 0;}${0}
    }

