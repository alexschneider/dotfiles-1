snippet #!
	#!/usr/bin/env python

snippet #!3
	#!/usr/bin/env python3

snippet timp
	import ${1:module}

snippet tfrom
	from ${1:package} import ${2:module}

# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:}
	Description: ${3}
	'''

snippet twh
	while ${1:condition}:
		${2:# TODO: write code...}

# dowh - does the same as do...while in other languages
snippet tdowh
	while True:
		${1:# TODO: write code...}
		if ${2:condition}:
			break

snippet twith
	with ${1:expr} as ${2:var}:
		${3:# TODO: write code...}

# New Class
snippet tcls
abbr    class Class(...): ...
	class ${1:name}(${2:object}):
		def __init__(self, ${4}):
			${0}

snippet tcld
abbr    class Class(...): ...
	class ${1:name}(${2:object}):
		"""${3:#:class documentation}"""
		def __init__(self, ${4}):
			${0}

snippet tcl1arg
	class ${1:name}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}

snippet tclsuper
	class ${1:name}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			${6}

# New Function
snippet tdef
abbr    def function(...): ...
options head
	def ${1:name}(${2:`indent('.') ? 'self' : ''`}):
		${0:TARGET}

snippet tdefd
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:# TODO: write code...}

snippet tdeff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3:# TODO: write code...}

# New Method
snippet tdefm
	def ${1:mname}(self, ${2:arg}):
		${3:# TODO: write code...}

snippet tdefmd
abbr    def method(self, ...): "..."
options head
	def ${1:mname}(self, ${2:arg}):
		"""${3:#:method documentation}"""
		${0:TARGET}

# New Property
snippet tproperty
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${5:del self._$1}
		return locals()
	$1 = property(**$1())

# Ifs
snippet tif
	if ${1:condition}:
		${2:# TODO: write code...}

# no extra indent because python indent does that for us
snippet telse
	else:
	${1:# TODO: write code...}

snippet telif
	elif ${1:condition}:
	${2:# TODO: write code...}

# For
snippet tfor
	for ${1:item} in ${2:items}:
		${3:# TODO: write code...}

# Encodes
snippet cutf8
	# -*- coding: utf-8 -*-
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cascii
	# -*- coding: ascii -*-

# Lambda
snippet ld
	lambda ${1:vars}: ${2:action}

snippet .
	self.

snippet ttry
	try:
		${1:# TODO: write code...}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
snippet ttrye
	try:
		${1:# TODO: write code...}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5:# TODO: write code...}
snippet ttryf
	try:
		${1:# TODO: write code...}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${5:# TODO: write code...}
snippet ttryff
	try:
		${1:# TODO: write code...}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5:# TODO: write code...}
	finally:
		${6:# TODO: write code...}

snippet texcept
	except ${1:Exception} as ${2:e}:
		${3:raise e}

snippet ifmainap
	import argparse
	
	def main(args):
		pass
	
	if __name__ == "__main__":
		ap = argparse.ArgumentParser()
		
		args = ap.parse_args()
		main(args)

# if __name__ == '__main__':
snippet ifmain
	if __name__ == "__main__":
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}

# python debugger (pdb)
snippet pdb
	import pdb; pdb.set_trace()
# ipython debugger (ipdb)
snippet ipdb
	import ipdb; ipdb.set_trace()
# ipython debugger (pdbbb)
snippet pdbbb
	import pdbpp; pdbpp.set_trace()
snippet pprint
	import pprint; pprint.pprint(${1})${2}
snippet "
	"""${1:doc}"""

# test function/method
snippet ttest
	def test_${1:description}(${2:`indent('.') ? 'self' : ''`}):
		${3:# TODO: write code...}
# test case
snippet testcase
	class ${1:ExampleCase}(unittest.TestCase):
		
		def test_${2:description}(self):
			${3:# TODO: write code...}

snippet fut
	from __future__ import ${1}

snippet filter
abbr    [x for x in {list} if {condition}]
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]

snippet optimport
	from optparse import make_option, OptionParser

snippet optlist
	OPTIONS = [
		make_option("-${1:short_arg}", "--${2:long_arg}", dest="$2", ${3:#:action="store_true", }${4}help="${5:help}"),${0}
	]

snippet option
	make_option("-${1:short_arg}", "--${2:long_arg}", dest="$2", ${3:#:action="store_true", }${4}help="${5:help}"),${0}

snippet optparse
	usage = "Usage: {0} [opts]".format(sys.argv[0])
	parser = OptionParser(usage, option_list=OPTIONS)
	opts, args = parser.parse_args()

snippet logimport
	import logging

snippet logsetup
	logging.basicConfig(level=logging.INFO, format='%(levelname)s - %(asctime)s: %(message)s')
	log = logging.getLogger(__file__)

snippet lenargv
	if len(sys.argv) != ${1:1}:
		print("Usage: {0} <args>".format(sys.argv[0]), file=sys.stderr)
		${2}
		sys.exit(1)
